#include "polinomial.h"
#include <iostream>
#include <chrono>
#include <bitset>
#include <assert.h>

using namespace std;

constexpr static int M = 491;

template < int >
string benchmark() {
	static auto start = chrono::high_resolution_clock::now();
	long long result = (chrono::high_resolution_clock::now() - start).count();
	start = chrono::high_resolution_clock::now();
	char buffer[1024];
	sprintf_s(buffer, "%.6fms", result / 1000000.0);
	return buffer;
}

int main()
{

	benchmark<0>();

	cout
		<< "M = " << M << "\n"
		<< "G = " << polinomial::G << "\n"
		<< "\n";

	polinomial
		a("00100000001110011000100111110101110011001000111111100000101101111010110100011110101111001011011110111110100000111010101001011101000000000100011000100011000100100100111001011101010001001100010111011100101100010010001100100000010011011011111111000100110000110000011001010101000000010011100011110100000111101101001101001101010100011100101010100111100101011000111011000000010110100000100001101100000011000101001110110011011001111011010010111010101001010001111000000111110010101110110011111101110"),
		b("10111001010111000010101010011011110010001100101111010110110000100001001110010010000010110100110100111000111010111001010011001000100011000111101011100001101001000011000111001001101011001110010111010110011101110001011001110101100100100000101001111000010110011111100010110111000101010111101100000000101100101110111100000010011000101000010101110011100000110100100010010010011111010000110001101100001101001011100000010001010111001000110011000111010011101110101110100110001110010010011100101000010"),
		n("01010010101110011100010011110110000110110010110101101011110110101000101101011010110011110100111101011101100101010011110000011101110101100010010000100111000110110110001011100010011111111101000010101100000111101010001101101010100001001000100100011110100110110101110100111110000011101111011000101100101010010000101111010010010000000111100001110111110000100011111110100111010111000111110111010101100000001111010100111011100011010011100010010101110001001111010101110111111001010110101011011111010"),
		ab_sum("10011001011001011010001101101110000001000100010000110110011101011011111010001100101101111111101010000110011010000011111010010101100011000011110011000010101101100111111110010100111010000010000000001010110001100011010101010101110111111011010110111100100110101111111011100010000101000100001111110100101011000011110001001111001100110100111111010100000101101100011001010010001001110000010000000000001110001110101110100010001110110011100001111101111010111111010110100001111100111100101111010101100"),
		ab_prod("11010011101110001111101001011000111111011101000110110000100001010110011011100111010001101000110001100101101010010011110101011111111101011011110111011011000101101111111110011010001100100100011001000111101001011101010011101010101111101110000001100001111101001011110011101101001100001100101101110111010111111011101010011000101101010001110001111110010010011011011110111011010010110011111011011100000111011110000110101001100110011011110101001010010001111110001011100111111100010110000001011111111"),
		an_pow("10100011110100110001000111010110101101100100101100000110010110100011100110001010010111000110110000101100000010001110011100010110001111010100111101110101000111101000000011001011011001010101101010110110100001110010100010011010100100010011111011001001010100000111101101011110001001010111111001000011100101000000110001110100101101011000101010010010001111111111110111001100111110110110100010001011101101001001001100100101001000010100101011011101001010011001101011110000001110101010101000100101100"),
		a_inv("10100001111010110000100011110011011010110011100001001011011001100001110001101110001001100101111111010010101100110010101110100101110001001010000011000101110011000000110101011101011100111111011101010101000001100000100110110101010001110011000110011110011100000010010010001111011101010000011000111101101011010011111001001010100000011111010100011100110001001001100000100101010010011111000000110100011101000110011011011001100110101101001100000111110110001001111010010001100010101110011011001000101");

	cout
		<< "a = " << a << "\n"
		<< "b = " << b << "\n"
		<< "n = " << n << "\n\n";

	polinomial temp;
	string time;

	cout << "ZERO = ";
	benchmark<1>();
	polinomial zero = bitset<M * 2>(0);
	time = benchmark<1>();
	cout
		<< zero << "\n"
		<< "Time: " << time << "\n"
		<< "\n";

	cout << "ONE = ";
	benchmark<1>();
	polinomial one = zero.flip();
	time = benchmark<1>();
	cout
		<< one << "\n"
		<< "Time: " << time << "\n"
		<< "\n";

	cout << "a + b = ";
	benchmark<1>();
	temp = a + b;
	time = benchmark<1>();
	assert(temp == ab_sum);
	cout
		<< temp << "\n"
		<< "Time: " << time << "\n"
		<< "\n";

	cout << "a * b = ";
	benchmark<1>();
	temp = a * b;
	time = benchmark<1>();
	assert(temp == ab_prod);
	cout
		<< temp << "\n"
		<< "Time: " << time << "\n"
		<< "\n";

	cout << "a ^ (-1) = ";
	benchmark<1>();
	temp = a.inverse();
	time = benchmark<1>();
	assert(temp == a_inv);
	cout
		<< temp << "\n"
		<< "Time: " << time << "\n"
		<< "\n";

	cout << "a ^ n = ";
	benchmark<1>();
	temp = polinomial::pow(a, n);
	time = benchmark<1>();
	assert(temp == an_pow);
	cout
		<< temp << "\n"
		<< "Time: " << time << "\n"
		<< "\n";

	polinomial
		x = (a + b) * n,
		y = b * n + n * a;
	assert(x == y);
	cout
		<< "(a + b) * n = " << x << "\n"
		<< "b * n + n * a = " << y << "\n"
		<< "\n";

	time = benchmark<0>();
	cout << "Total time: " << time << "\n";

}